plot_ss(x = homeruns, y = runs, data = mlb11, showSquares = TRUE)
m2 <- lm(runs ~ homeruns, data = mlb11)
summary(m2)
ggplot(data = mlb11, aes(x = homeruns, y = runs)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m2, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m2, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
# type your code for Question 9 here, and Knit
## hits
plot(mlb11$runs, mlb11$hits)
mlb11 %>%
summarise(cor(runs, hits))
plot_ss(x = hits, y = runs, data = mlb11, showSquares = TRUE)
m3 <- lm(runs ~ hits, data = mlb11)
summary(m3)
ggplot(data = mlb11, aes(x = hits, y = runs)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m3, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m3, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
## wins
plot(mlb11$runs, mlb11$wins)
mlb11 %>%
summarise(cor(runs, wins))
plot_ss(x = wins, y = runs, data = mlb11, showSquares = TRUE)
m4 <- lm(runs ~ wins, data = mlb11)
summary(m4)
ggplot(data = mlb11, aes(x = homeruns, y = runs)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m4, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m4, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
## batting average
plot(mlb11$runs, mlb11$bat_avg)
mlb11 %>%
summarise(cor(runs, bat_avg))
plot_ss(x = bat_avg, y = runs, data = mlb11, showSquares = TRUE)
m5 <- lm(runs ~ bat_avg, data = mlb11)
summary(m5)
ggplot(data = mlb11, aes(x = bat_avg, y = runs)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m5, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m5, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
# type your code for Question 10 here, and Knit
## new obs
plot(mlb11$runs, mlb11$new_obs)
mlb11 %>%
summarise(cor(runs, new_obs))
plot_ss(x = new_obs, y = runs, data = mlb11, showSquares = TRUE)
m6 <- lm(runs ~ new_obs, data = mlb11)
summary(m6)
ggplot(data = mlb11, aes(x = new_obs, y = runs)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m6, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m6, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
# type your code for Question 10 here, and Knit
## new obs
plot(mlb11$runs, mlb11$new_obs)
mlb11 %>%
summarise(cor(runs, new_obs))
plot_ss(x = new_obs, y = runs, data = mlb11, showSquares = TRUE)
m6 <- lm(runs ~ new_obs, data = mlb11)
summary(m6)
ggplot(data = mlb11, aes(x = new_obs, y = runs)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m6, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m6, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
## new slug
plot(mlb11$runs, mlb11$new_slug)
mlb11 %>%
summarise(cor(runs, new_slug))
plot_ss(x = new_slug, y = runs, data = mlb11, showSquares = TRUE)
m7 <- lm(runs ~ new_slug, data = mlb11)
summary(m7)
ggplot(data = mlb11, aes(x = new_slug, y = runs)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m7, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m7, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
# type your code for Question 10 here, and Knit
## new obs
plot(mlb11$runs, mlb11$new_obs)
mlb11 %>%
summarise(cor(runs, new_obs))
plot_ss(x = new_obs, y = runs, data = mlb11, showSquares = TRUE)
m6 <- lm(runs ~ new_obs, data = mlb11)
summary(m6)
ggplot(data = mlb11, aes(x = new_obs, y = runs)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m6, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m6, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
## new slug
plot(mlb11$runs, mlb11$new_slug)
mlb11 %>%
summarise(cor(runs, new_slug))
plot_ss(x = new_slug, y = runs, data = mlb11, showSquares = TRUE)
m7 <- lm(runs ~ new_slug, data = mlb11)
summary(m7)
ggplot(data = mlb11, aes(x = new_slug, y = runs)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m7, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m7, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
## new onbase
plot(mlb11$runs, mlb11$new_onbase)
mlb11 %>%
summarise(cor(runs, new_onbase))
plot_ss(x = new_onbase, y = runs, data = mlb11, showSquares = TRUE)
m8 <- lm(runs ~ new_onbase, data = mlb11)
summary(m8)
ggplot(data = mlb11, aes(x = new_onbase, y = runs)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = m8, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m8, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
library(statsr)
library(dplyr)
library(ggplot2)
library(GGally)
install.packages("GGally")
library(GGally)
library(statsr)
library(dplyr)
library(ggplot2)
library(GGally)
install.packages("GGally")
library(GGally)
library(statsr)
library(dplyr)
library(ggplot2)
install.packages("GGally")
# type your code for Question 3 here, and Knit
summary(evalSource())
# type your code for Question 3 here, and Knit
summary(evalSource)
# type your code for Question 3 here, and Knit
summary(evals)
# type your code for Question 3 here, and Knit
summary(evals$score)
data(evals)
load(evals)
data(evals)
# type your code for Question 3 here, and Knit
summary(evals)
# type your code for Question 3 here, and Knit
hist(evals$score)
data(evals)
# type your code for Question 3 here, and Knit
hist(score)
# type your code for Question 3 here, and Knit
hist(eval)
# type your code for Question 3 here, and Knit
hist(evals)
library(ggplot2)
library(dplyr)
library(statsr)
#load("movies.Rdata")
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress win, data = movies.Rdata)
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress win, data = movies.Rdata)
load("C:/Users/Yuzi/OneDrive/デスクトップ/C3W4/movies.Rdata")
#load("movies.Rdata")
movies = load("movies.Rdata")
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress win, data = movies.Rdata)
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress win, data = movies)
#load("movies.Rdata")
movies = load("movies.Rdata")
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress win, data = movies)
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress win, data = movies.Rdata)
#load("movies.Rdata")
load("movies.Rdata")
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress win, data = movies.Rdata)
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress win, data = movies)
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress win, data = movies)
#load("movies.Rdata")
load("movies.Rdata")
str(movies)
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress win, data = movies)
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress_win, data = movies)
summary(Oscar_full)
# full model
Oscar_full = lm(best_pic_nom ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress_win, data = movies)
# full model
Oscar_full = lm(critics_score ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress_win, data = movies)
# full model
Oscar_full = lm(critics_score ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress_win, data = movies)
summary(Oscar_full)
# full model
Oscar_full = lm(critics_score ~ imdb_rating + imdb_num_votes + best_actor_win + best_actress_win + studio, data = movies)
summary(Oscar_full)
movie_pop = lm(audience_score ~ title_type + genre + best_pic_nom + best_actress_win + best_dir_win + studio, data = movies)
movie_pop = lm(audience_score ~ title_type + genre + best_pic_nom + best_actress_win + best_dir_win + studio, data = movies)
summary(movie_pop)
movie_pop = lm(audience_score ~ title_type + genre + best_pic_nom + best_actress_win + best_dir_win + studio, data = movies)
summary(movie_pop)
plot(movies$title_type, movies$audience_score)
plot(movies$genre, movies$audience_score)
plot(movies$best_pic_nom, movies$audience_score)
plot(movies$best_actor_win, movies$audience_score)
plot(movies$best_actress_win, movies$audience_score)
plot(movies$best_dir_win, movies$audience_score)
plot(movies$studio, movies$audience_score)
movie_pop = lm(audience_score ~ title_type + genre + best_pic_nom + best_actress_win + best_dir_win + studio, data = movies)
summary(movie_pop)
plot(movies$genre, movies$audience_score)
la_la_land <- data.frame(genre = drama, best_pic_nom = "yes", best_actress_win = "yes", best_dir_win = "yes", studio = "Liongate Films")
la_la_land <- data.frame(genre = "drama", best_pic_nom = "yes", best_actress_win = "yes", best_dir_win = "yes", studio = "Liongate Films")
predict(fit2, la_la_land)
la_la_land <- data.frame(genre = "drama", best_pic_nom = "yes", best_actress_win = "yes", best_dir_win = "yes", studio = "Liongate Films")
predict(la_la_land)
la_la_land <- data.frame(genre = "drama", best_pic_nom = "yes", best_actress_win = "yes", best_dir_win = "yes", studio = "Liongate Films")
predict(fit, la_la_land)
la_la_land <- data.frame(genre = "drama", best_pic_nom = "yes", best_actress_win = "yes", best_dir_win = "yes", studio = "Liongate Films")
predict(movie_pop, la_la_land)
la_la_land <- data.frame(title_type = Feature Film, genre = "drama", best_pic_nom = "yes", best_actress_win = "yes", best_dir_win = "yes", studio = "Liongate Films")
la_la_land <- data.frame(title_type = "Feature Film", genre = "drama", best_pic_nom = "yes", best_actress_win = "yes", best_dir_win = "yes", studio = "Liongate Films")
predict(movie_pop, la_la_land)
la_la_land <- data.frame(title_type = "Feature Film", genre = "Drama", best_pic_nom = "yes", best_actress_win = "yes", best_dir_win = "yes", studio = "Liongate Films")
predict(movie_pop, la_la_land)
la_la_land <- data.frame(title_type = "Feature Film", genre = "Drama", best_pic_nom = "yes", best_actress_win = "yes", best_dir_win = "yes", studio = "Lionsgate Films")
predict(movie_pop, la_la_land)
la_la_land <- data.frame(title_type = "Feature Film", genre = "Drama", best_pic_nom = "yes", best_actress_win = "yes", best_dir_win = "yes", studio = "Lionsgate Films")
predict(movie_pop, la_la_land)
(999/1000)^10
((1000000-1)/1000000)^10
(999/1000)^10 + ((1000000-1)/1000000)^10
(999/1000)^10 / (999/1000)^10 + ((1000000-1)/1000000)^10
(999/1000)^10
(999/1000)^10 + ((1000000-1)/1000000)^10
(999/1000)^10
(999/1000)^10 + ((1000000-1)/1000000)^10
0.9900449/ 1.990035
x * y
2 * 108
2 * 108
1.45 * 108
4.4 * 108
5.7 * 108
3.6 * 108
x <- 3
x
(100 - 50)/50*100
x <- c(2,1.45,4.4,5.7,3.6)
x * 108
(x - 239)/239 * 100
(y1 - 239)/239 * 100
(y2 - 239)/239 * 100
(y3 - 239)/239 * 100
(y4 - 239)/239 * 100
(y5 - 239)/239 * 100
y1=216
y2=156
y3=475
y4=615
y5=388
(y1 - 239)/239 * 100
(y2 - 239)/239 * 100
(y3 - 239)/239 * 100
(y4 - 239)/239 * 100
(y5 - 239)/239 * 100
y1=313
y2=388
y3=594
y4=810
y5=1026
y6=1242
y7=1306
(y1 - 239)/239 * 100
(y2 - 239)/239 * 100
(y3 - 239)/239 * 100
(y4 - 239)/239 * 100
(y5 - 239)/239 * 100
(y6 - 239)/239 * 100
(y7 - 239)/239 * 100
4.98*108
(538 - 239)/239 * 100
10*108
50*108
(1080 - 239)/239 * 100
(5400 - 239)/239 * 100
g
edge <- c(0,1, 0,2, 0,3, 1,2, 2,2, 1,3, 1,3)
g <- graph(edge, directed=FALSE)
g
g
g
g <- graph(edge, directed=FALSE)
library(igraph)
edge <- c(0,1, 0,2, 0,3, 1,2, 2,2, 1,3, 1,3)
g <- graph(edge, directed=FALSE)
g
g <- graph(edge, n = 4directed=FALSE)
g <- graph(edge, n = 4, directed=FALSE)
library(igraph)
dg1 <- matrix(c(0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0), nrow=4, ncol = 4, byrow = TRUE)
dg1
class(dg1)
g1
g1 <- graph.adjacency(dg1)
g1
class(g1)
dev.off()
png("110214.g1.png")
plot.igraph(g1)
dev.off()
dev.off()
plot.igraph(g1)
png("110214.g1.png")
dg1
library(igraph)
dg1 <- matrix(c(0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0), nrow=4, ncol = 4, byrow = TRUE)
dg1
class(dg1)
#igraphのパッケージでは、隣接行列をそのままネットワークデーとして用いることができないので、隣接行列からigraphで利用可能なigraphオブジェクトを生成する必要がある。
g1 <- graph.adjacency(dg1)
#adjacencyとは”隣接”という意味！
g1
class(g1)
png("110214.g1.png")
plot.igraph(g1)
library(igraph)
dg1 <- matrix(c(0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0), nrow=4, ncol = 4, byrow = TRUE)
dg1
class(dg1)
#igraphのパッケージでは、隣接行列をそのままネットワークデーとして用いることができないので、隣接行列からigraphで利用可能なigraphオブジェクトを生成する必要がある。
g1 <- graph.adjacency(dg1)
#adjacencyとは”隣接”という意味！
g1
class(g1)
png("110214.g1.png")
plot.igraph(g1)
g <- random.graph.game(50,p=0.1,direct=F)
png("random.graph.png")
plot(g,main="random graph n=50,p=0.1")
library(igraph)
gr <- graph.edgelist(as.matrix(df),directed = FALSE)
gr
V(gr)
rm(list=ls())
library(igraph)
g1 <- graph(edges=c(1,2, 2,3, 3,1), n=10, directed=F)
plot(g1)
class(g1)
g3 <- graph(c("Japan", "Germany", "Italy"))
plot(g3)
fg <- make_full_graph(100)
plot(fg, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children=3, mode="undirected")
plot(tr, vertex.size=10, vertex.label=NA)
g <- erdos.renyi.game(15,5/10,directed=T)
plot(g)
g1 <- graph_from_literal(a-b-c-d-e-f, a-g-h-b, h-e:i, j)
plot(g1)
install.packages("igraph")
install.packages("igraph")
library(igraph)
japangraph <- read.graph("japangraph_pajek_xy2.net", format="pajek")
#パッケージの読み込み
library(igraph)
#パッケージをインストール方法
install.packages(igraph)
#パッケージの読み込み
library("igraph")
#パッケージをインストール方法
install.packages("igraph")
library(igraph)
plot(degree_distribution(ge))
library(igraph)
# nodes
nodes <- data.frame(
name = c("Alice","Yuki","Bob","Hiro"),
gender = c("F", "F", "M", "M"),
age =    c( 17,  20,  21,  18))
# relations
edges <- data.frame(
from = c("Alice", "Yuki", "Hiro", "Alice"),
to  =  c("Bob", "Bob", "Bob", "Hiro"))
# build a graph object
net <- graph.data.frame(edges, directed=F, vertices=nodes)
# plot and browse
plot(net)
V(net)
E(net)
# Generate E-R random network
ge <- erdos.renyi.game(1000, 1/100)
plot(degree_distribution(ge))
nodes <- data.frame(
name = c("Alice","Yuki","Bob","Hiro"),
gender = c("F", "F", "M", "M"),
age =    c( 17,  20,  21,  18))
# relations
edges <- data.frame(
from = c("Alice", "Yuki", "Hiro", "Alice"),
to  =  c("Bob", "Bob", "Bob", "Hiro"))
# build a graph object
net <- graph.data.frame(edges, directed=F, vertices=nodes)
# plot and browse
plot(net)
# Generate E-R random network
ge <- erdos.renyi.game(1000, 1/100)
plot(degree_distribution(ge))
degree_distribution(ge)
library('mi')
# パッケージのインストールとライブラリ呼び出し
install.packages('mi')
library('mi')
library("quantmod")
getwd()
setwd("C:/Users/Yuzi/OneDrive/2019(Spring)/時系列分析/WorkSpace/R")
getSymbols("JPNNGDP", src = "FRED")
getSymbols("AAPL", from = "2010-01-01")
# 原系列
plot(JPNNGDP) # 時系列プロット
acf(JPNNGDP) # コレログラム
Box.test (JPNNGDP, lag = 1, type = "Ljung") # かばん検定
# 成長率
jpdgp.r <- periodReturn(JPNNGDP) * 100
plot(jpdgp.r); acf(jpdgp.r)
Box.test (jpdgp.r, lag = 5, type = "Ljung")
Box.test (jpdgp.r, lag = 10, type = "Ljung")
aapl <- AAPL[,6] # 修正後終値
plot(aapl); acf(aapl)
Box.test (aapl, lag = 10, type = "Ljung")
# 日次対数収益率
aapl.dr <- dailyReturn(aapl, type = 'log')
plot(aapl.dr); acf(aapl.dr)
Box.test (aapl.dr, lag = 5, type = "Ljung")
Box.test (aapl.dr, lag = 10, type = "Ljung")
Box.test (aapl.dr, lag = 20, type = "Ljung")
ma11 <- arima.sim(list(order = c(0,0,1), ma = 0.8), n = 200)
ma12 <- 2 + arima.sim(list(order = c(0,0,1), ma = 0.5), sd = 0.5, n = 200)
ma13 <- -2 + arima.sim(list(order = c(0,0,1), ma = 0.3), sd = 2, n = 200)
ma14 <- arima.sim(list(order = c(0,0,1), ma = -0.3), n = 200)
ma15 <- 2 + arima.sim(list(order = c(0,0,1), ma = -0.5), sd = 0.5, n = 200)
ma16 <- -2 + arima.sim(list(order = c(0,0,1), ma = -0.8), sd = 2, n = 200)
par(mfrow = c(3, 2)) # プロット画面を3行2列に分割
plot(ma11); plot(ma12); plot(ma13); plot(ma14); plot(ma15); plot(ma16)
